<?php
/**
 * @file
 * Main module file for the Coordinate Field module
 */

/**
 * Implements hook_field_info()
 */
function coordinate_field_field_info() {
  return array(
    'coordinate_field' => array(
      'label' => t('Coordinate'),
      'description' => t('Store X and Y coordinate values.'),
      'settings' => array(
        'unit' => 'px',
      ),
      'default_widget' => 'coordinate_field_widget',
      'default_formatter' => 'coordinate_field_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form()
 */
function coordinate_field_field_settings_form($field, $instance) {
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $scheme_options = array();

  // @todo:
  // Add more units for support as needed.
  $units = array('px' => 'Pixels');

  $form['unit'] = array(
    '#title' => t('Coordinate Unit'),
    '#description' => t('Which unit of measure our coordinates will be in.'),
    '#type' => 'select',
    '#options' => $units,
    '#default_value' => $settings['unit'],
  );

  return $form;
}

/**
 * Implements hook_field_widget_info()
 */
function coordinate_field_field_widget_info() {
  return array(
    'coordinate_field_widget' => array(
      'label' => t('Default'),
      'description' => t('Input X and Y values.'),
      'field types' => array('coordinate_field'),
      'behaviors' => array(
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form()
 */
function coordinate_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_settings = $field['settings'];

  switch ($field['type']) {
    case 'coordinate_field':
      // Not sure why we have to manually add the field name to the widget,
      // but seems like we do.
      $element['label'] = array(
        '#markup' => theme('html_tag', array(
          'element' => array(
            '#tag' => 'label',
            '#value' => filter_xss($instance['label']),
          ),
        )),
      );

      $element['position_x'] = array(
        '#title' => t('X'),
        '#type' => 'textfield',
        '#size' => 15,
        '#prefix' => '<div class="container-inline">',
        '#suffix' => $field_settings['unit'] . '</div>',
        '#default_value' => isset($items[$delta]['position_x']) ? $items[$delta]['position_x'] : '',
      );

      $element['position_y'] = array(
        '#title' => t('Y'),
        '#type' => 'textfield',
        '#size' => 15,
        '#prefix' => '<div class="container-inline">',
        '#suffix' => $field_settings['unit'] . '</div>',
        '#default_value' => isset($items[$delta]['position_y']) ? $items[$delta]['position_y'] : '',
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_validate().
 */
function coordinate_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!coordinate_field_field_is_empty($item, $field)) {
      // Check that X is a number
      if (!is_numeric($item['position_x'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'coordinate_field_invalid_position_x',
          'message' => t('X Coordinate must be an integer or decimal.'),
        );
      }

      // Check that Y is a number
      if (!is_numeric($item['position_y'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'coordinate_field_invalid_position_y',
          'message' => t('Y Coordinate must be an integer or decimal.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function coordinate_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'coordinate_field_invalid_position_x':
      form_error($element['position_x'], $error['message']);
      break;
    case 'coordinate_field_invalid_position_y':
      form_error($element['position_y'], $error['message']);
      break;
  }
}

/**
 * Implements hook_field_is_empty()
 */
function coordinate_field_field_is_empty($item, $field) {
  if (empty($item['position_x']) && empty($item['position_y'])) {
    return TRUE;
  }
}

/**
 * Implements hook_field_formatter_info()
 */
function coordinate_field_field_formatter_info() {
  return array(
    'coordinate_field_string' => array(
      'label' => t('String'),
      'field types' => array('coordinate_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function coordinate_field_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = '';
  $field_settings = $field['settings'];

  foreach ($items as $delta => $item) {
    if (!empty($item)) {
      switch ($display['type']) {
        case 'coordinate_field_string':
          $output = $item['position_x'] . ' ' . $field_settings['unit'];
          $output .= ' x ';
          $output .= $item['position_y'] . ' ' . $field_settings['unit'];
          break;
      }

      $element[$delta] = array('#markup' => $output);
    }
  }

  return $element;
}
